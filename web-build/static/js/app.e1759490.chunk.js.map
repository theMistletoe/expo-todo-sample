{"version":3,"sources":["redux/Todo/actions.ts","components/Task.tsx","components/TaskList.tsx","components/TaskForm.tsx","pages/Home.tsx","components/TaskDescription.tsx","pages/Detail.tsx","redux/Todo/reducer.ts","redux/rootReducer.ts","redux/store.ts","App.tsx"],"names":["updateTask","task","type","deleteTask","id","styles","StyleSheet","create","container","flex","flexDirection","item","padding","fontSize","height","Task","props","navigation","useNavigation","dispatch","useDispatch","View","style","Text","key","index","onPress","navigate","title","Button","TaskList","FlatList","data","tasks","renderItem","TaskForm","useState","inputText","setInputText","TextInput","placeholder","onChangeText","text","value","App","getData","useSelector","state","todos","backgroundColor","alignItems","justifyContent","centeredView","marginTop","modalView","margin","borderRadius","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","elevation","openButton","textStyle","color","fontWeight","textAlign","modalText","marginBottom","itemdesc","TaskDescription","updatedTask","multiline","numberOfLines","description","handlePress","Detail","route","params","find","goBack","INITIAL_STATE","reducer","action","newTask","Math","random","toString","substring","newTasks","filter","todo","updatedTasks","slice","combineReducers","composeReduxDevToolsEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","Stack","createStackNavigator","NavigationContainer","Navigator","initialRouteName","Screen","name","component","Home"],"mappings":"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","file":"static/js/app.e1759490.chunk.js","sourcesContent":["import { TaskItem } from '../../types/TaskItem';\n\nexport const ADD_TASK = \"ADD_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const UPDATE_TASK = \"UPDATE_TASK\";\n\nexport const updateTask = (task: TaskItem) => ({\n  type: 'UPDATE_TASK',\n  task\n});\n\n\nexport const deleteTask = (id: string) => ({\n  type: 'DELETE_TASK',\n  id\n});\n\nexport const addTask = (title:string) => ({\n  type: 'ADD_TASK',\n  title: title,\n});\n","import { useNavigation } from '@react-navigation/native';\nimport React from 'react';\nimport { Button, StyleSheet, Text, View } from 'react-native';\nimport { TaskItem } from '../types/TaskItem';\nimport { useDispatch } from 'react-redux';\nimport { deleteTask } from '../redux/Todo/actions';\n\ntype Props = {\n    task: TaskItem;\n    index: number;\n}\n\nconst Task = (props: Props) => {\n    const navigation = useNavigation(); // (2)\n    const dispatch = useDispatch();\n\n    const handlePressOnTaskTitle = () => {\n      navigation.navigate(\n        'Detail',\n        {\n          id: props.task.id,\n        }\n      )\n    };\n\n    const handlePressOnDeleteButton = () => {\n      dispatch(deleteTask(props.task.id));\n      navigation.navigate('Home');\n    }\n\n    return (\n      <View style={styles.container}>\n        <Text\n          style={styles.item}\n          key={props.index}\n          onPress={handlePressOnTaskTitle}\n          >\n          {props.task.title}\n        </Text>\n        <Button\n          title=\"Delete\"\n          onPress={handlePressOnDeleteButton}\n          />\n      </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 44,\n  },\n});\n\nexport default Task;","import { useNavigation } from '@react-navigation/native';\nimport React from 'react';\nimport { StyleSheet, Text, FlatList } from 'react-native';\nimport { TaskItem } from '../types/TaskItem';\nimport Task from './Task';\n\ntype Props = {\n    tasks: TaskItem[];\n}\n\nconst TaskList = (props: Props) => {\n    const navigation = useNavigation(); // (2)\n    return (\n        <FlatList\n            data={props.tasks}\n            renderItem={({item, index}) => {\n                return <Task task={item} index={index} />;\n            }}\n        />\n    );\n};\n\nconst styles = StyleSheet.create({\n    item: {\n        padding: 10,\n        fontSize: 18,\n        height: 44,\n    },\n});\n\nexport default TaskList;","import React, { useState } from 'react';\nimport { View, TextInput, Button } from 'react-native';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from '../redux/Todo/actions';\n\nconst TaskForm = () => {\n  const dispatch = useDispatch();\n  const [inputText, setInputText] = useState<string>('');\n\n  const handlePress = () => {\n    dispatch(addTask(inputText));\n    setInputText(\"\");\n  };\n\n  return (\n    <View>\n      <TextInput\n        style={{height: 40}}\n        placeholder=\"Type Task Title here!\"\n        onChangeText={text => setInputText(text)}\n        value={inputText}\n      />\n      <Button\n        title=\"Save\"\n        onPress={handlePress}\n      />\n    </View>\n  );\n};\n\nexport default TaskForm;","import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useSelector } from 'react-redux'\nimport TaskList from '../components/TaskList';\nimport TaskForm from '../components/TaskForm';\n\nexport default function App() {\n\n  const getData = useSelector((state: any) => state);\n\n  return (\n    <View style={styles.container}>\n      <TaskForm />\n      <TaskList tasks={getData.todos} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 44,\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  openButton: {\n    backgroundColor: \"#F194FF\",\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  }\n});\n","import React from 'react';\nimport { StyleSheet, View, Button, GestureResponderEvent, TextInput } from 'react-native';\nimport { TaskItem } from '../types/TaskItem';\nimport { useDispatch } from 'react-redux';\nimport { deleteTask, updateTask } from '../redux/Todo/actions';\nimport { useNavigation } from '@react-navigation/native';\n\ntype Props = {\n    task: TaskItem;\n    handlePress: (event: GestureResponderEvent) => void;\n}\n\nconst TaskDescription = (props: Props) => {\n    const navigation = useNavigation();\n    const dispatch = useDispatch();\n\n    const handleOnChangeTitle = (title: string) => {\n        const updatedTask: TaskItem = {\n            ...props.task,\n            title\n        }\n        dispatch(updateTask(updatedTask));\n    }\n\n    const handleOnChangeDescription = (description: string) => {\n        const updatedTask: TaskItem = {\n            ...props.task,\n            description\n        }\n        dispatch(updateTask(updatedTask));\n    }\n\n    const handlePressOnDeleteButton = () => {\n        dispatch(deleteTask(props.task.id));\n        navigation.navigate('Home');\n    }\n\n    return (\n        <View style={styles.container}>\n            <TextInput\n                style={styles.item}\n                onChangeText={handleOnChangeTitle}\n                value={props.task.title}\n            />\n            <TextInput\n                multiline = {true}\n                numberOfLines = {4}\n                style={styles.itemdesc}\n                onChangeText={handleOnChangeDescription}\n                value={props.task.description}\n            />\n            <View style={{flex: 1, flexDirection: 'row'}}>\n                <View style={styles.item}>\n                    <Button title=\"close\" onPress={props.handlePress}/>\n                </View>\n                <View style={styles.item}>\n                    <Button color='red' title=\"Delete\" onPress={handlePressOnDeleteButton} />\n                </View>\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    item: {\n        padding: 10,\n        fontSize: 18,\n        height: 44,\n    },\n    itemdesc: {\n        padding: 10,\n        fontSize: 18,\n        height: 80,\n    },\n});\n\nexport default TaskDescription;","import { useNavigation } from '@react-navigation/native';\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useSelector } from 'react-redux';\nimport TaskDescription from '../components/TaskDescription';\nimport { TaskItem } from '../types/TaskItem';\n\n// TODO ここのrouteの型推論はv5で聞かせられるようになってるらしい\n// https://qiita.com/shinnoki/items/e32e20b812606ce7219c\nexport default function Detail({ route }) {\n  const navigation = useNavigation(); // (2)\n  const getData = useSelector((state: any) => state);\n\n  const { id } = route.params;\n  const task: TaskItem = getData.todos.find((task: TaskItem) => task.id === id)\n\n  const handlePressOnCloseButton = () => {\n    navigation.goBack()\n  };\n\n  return (\n    <View style={styles.container}>\n      <TaskDescription\n        task={task}\n        handlePress={handlePressOnCloseButton} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","import { TaskItem } from '../../types/TaskItem';\n\nconst INITIAL_STATE: TaskItem[] = [\n  {id: \"xxx\", title: 'Task1', description: \"description1\"},\n  {id: \"yyy\",title: 'Task2', description: \"description2\"},\n  {id: \"zzz\",title: 'Task3', description: \"description3\"},\n]\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'ADD_TASK':\n      const newTask: TaskItem = {\n        id: Math.random().toString(32).substring(2),\n        title: action.title,\n        description: \"\"\n      };\n      return [...state, newTask];\n    case 'DELETE_TASK':\n      const newTasks: TaskItem[] = state.filter((todo: TaskItem) => todo.id !== action.id);\n      return newTasks\n    case 'UPDATE_TASK':\n      const updatedTasks: TaskItem[] = state.slice();\n      updatedTasks.find((task: TaskItem) => task.id === action.task.id)!.title = action.task.title;\n      updatedTasks.find((task: TaskItem) => task.id === action.task.id)!.description = action.task.description;\n      return updatedTasks\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import { combineReducers } from \"redux\";\nimport reducer from \"./Todo/reducer\";\n\nexport default combineReducers({\n  todos: reducer\n})","import { createStore, compose, applyMiddleware } from \"redux\";\nimport rootReducer from \"./rootReducer\";\n\ninterface ExtendedWindow extends Window {\n  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n};\ndeclare var window: ExtendedWindow;\n\nconst composeReduxDevToolsEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middlewares:any = [];\n\nexport const store = createStore(\n  rootReducer,\n  composeReduxDevToolsEnhancers(applyMiddleware(...middlewares))\n);","import React from 'react';\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\n\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\n// (1) StackNavigatorを生成する\nconst Stack = createStackNavigator();\n\nexport default function App() {\n\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        {/* (1) 画面遷移対象のアプリケーションコード */}\n        <Stack.Navigator initialRouteName=\"Home\">\n          {/* (2) StackNavigator用の画面を定義する */}\n          <Stack.Screen\n            name=\"Home\"\n            component={Home} />\n          <Stack.Screen\n            name=\"Detail\"\n            component={Detail} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n"],"sourceRoot":""}